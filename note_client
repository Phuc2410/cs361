import zmq

def client():
    context = zmq.Context()
    socket = context.socket(zmq.REQ)  # Request socket
    socket.connect("tcp://localhost:5555")

    print("Welcome to the Note-Taking App! Capture and store important information easily.")

    while True:
        print("Options:")
        print("1. Create a new note")
        print("2. Get a note by ID")
        print("3. Delete a note by ID")
        print("4. Replace note by ID")
        print("5. Exit")
        
        option = int(input("Choose an option (1-5): "))

        if option == 1:
            note_content = input("Enter the note content: ")
            socket.send_json({"action": "create", "content": note_content})
            response = socket.recv_json()
            print("Create Note Response:", response)

        elif option == 2:
            note_id = int(input("Enter the note ID to retrieve: "))
            socket.send_json({"action": "get", "id": note_id})
            response = socket.recv_json()
            print("Get Note Response:", response)

        elif option == 3:
            note_id = int(input("Enter the note ID to delete: "))
            while True: 
                confirmation = input("Are you sure? You will lose all your progress. (yes/no): ")
                if confirmation == "yes":
                    socket.send_json({"action": "delete", "id": note_id})
                    response = socket.recv_json()
                    print("Response:", response)
                    break
                elif confirmation == "no":
                    print("Delete action canceled.")
                    break
                else:
                    print("Please enter again")

        elif option == 4:
            note_id = int(input("Enter the note ID that needs to be replaced: "))
            new_content = input("Edit note: ")
            socket.send_json({"action": "replace", "id": note_id, "content": new_content})
            response = socket.recv_json()  # Get the response after the replacement
            print("Replace Note Response:", response)  # Print the response

        elif option == 5:
            print("Exiting...")
            break

        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    client()

